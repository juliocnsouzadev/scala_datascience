package week5

object Testing {

  def init[T](xs: List[T]): List[T] = xs match {
    case List()  => throw new Error("init of empty list")
    case List(x) => List()
    case y :: ys => y :: init(ys)
  }

  def removeAt[T](n: Int, xs: List[T]) = (xs take n) ::: (xs drop n + 1)

  removeAt(1, List('a', 'b', 'c', 'd'))

  //def merge[T](xs: List[T], ys: List[T])(lt: (T, T) => Boolean): List[T] =
  def merge[T](xs: List[T], ys: List[T])(implicit ord: Ordering[T]): List[T] =
    (xs, ys) match {
      case (Nil, ys) => ys
      case (xs, Nil) => xs
      case (x :: xs1, y :: ys1) =>
        if (ord.lt(x, y)) x :: merge(xs1, ys)(ord)
        else y :: merge(xs, ys1)(ord)

    }

  //def msort[T](xs: List[T])(lt: (T, T) => Boolean): List[T] = {
  def msort[T](xs: List[T])(implicit ord: Ordering[T]): List[T] = {
    val n = xs.length / 2
    if (n == 0) xs
    else {
      val (fst, snd) = xs splitAt n
      merge(msort(fst), msort(snd))
    }
  }

  val numbers = List(0, 10 - 5 - 8, 11, 4, 3, -1, 1, -2)
  //msort(numbers)((x: Int, y: Int) => x < y)
  msort(numbers)(Ordering.Int)
  msort(numbers)

  val eletronics = List("laptop", "smartphone", "desktop")
  //msort(eletronics)((x:String, y:String) => x.compareTo(y) < 0)
  msort(eletronics)(Ordering.String)
  msort(eletronics)

  def squareList(xs: List[Int]): List[Int] =
    xs match {
      case Nil     => Nil
      case y :: ys => y * y :: squareList(ys)
    }

  def squareListMap(xs: List[Int]): List[Int] =
    xs map (x => x*x)
    
    squareList(numbers)
    
    squareListMap(numbers)
    
    
   numbers reduceLeft (_ + _)
   
   numbers reduceLeft (_ * _)
   
}