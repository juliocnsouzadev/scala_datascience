package br.com.juliocnsouza.spark.scala.spark_basics

import org.apache.spark._
import org.apache.spark.SparkContext._
import org.apache.log4j._
import org.apache.spark.rdd.RDD

object Friends {

  def parseLineByAge(line: String) = {
    val fields = line.split(",")
    val age = fields(2).toString
    val numFriends = fields(3).toInt
    (age, numFriends)
  }

  def parseLineByName(line: String) = {
    val fields = line.split(",")
    val name = fields(1).toString
    val numFriends = fields(3).toInt
    (name, numFriends)
  }

  def parseLineByNameFirstLetter(line: String) = {
    val fields = line.split(",")
    val firstLetter = fields(1).toString.charAt(0).toString
    val numFriends = fields(3).toInt
    (firstLetter, numFriends)
  }

  def buildResults(title: String, lines: RDD[String], parseRddFunc: String => (String, Int), opMapFunc: (Int, Int) => Int) = {
    val rdd = lines map parseRddFunc
    val totals = rdd.mapValues(x => (x, 1)).reduceByKey((x, y) => (x._1 + y._1, x._2 + y._2))
    val operation = totals.mapValues(x => opMapFunc(x._1, x._2))
    val results = operation.collect
    show(title, results)
  }

  def show(title:String , results: Array[(String, Int)]) = {
    println("\n" + title)
    results.sorted.foreach(println)
  }

  def main(args: Array[String]) {
    // Set the log level to only print errors
    Logger.getLogger("org").setLevel(Level.ERROR)

    // Create a SparkContext using every core of the local machine
    val sc = new SparkContext("local[*]", "FriendsBySomething")

    // Load each line of the source data into an RDD
    val lines = sc.textFile("../fakefriends.csv")

    def avg(x:Int, y:Int) =  x / y
    
    def sum(x:Int, y:Int) =  x + y
    
    buildResults("Averages By Age", lines, parseLineByAge, avg)

    buildResults("Averages By Name", lines, parseLineByName, avg)

    buildResults("Averages By First Letter", lines, parseLineByNameFirstLetter, avg)
    
    buildResults("Sum By Age", lines, parseLineByAge, sum)

    buildResults("Sum By Name", lines, parseLineByName, sum)

    buildResults("Sum By First Letter", lines, parseLineByNameFirstLetter, sum)

  }

}
  