package week6

import scala.io.Source


object mnemonics {
  val in = Source.fromURL("http://lamp.epfl.ch/files/content/sites/lamp/files/teaching/progfun/linuxwords.txt")
                                                  //> in  : scala.io.BufferedSource = non-empty iterator
                                                  
	val words = in.getLines.toList filter (word => word forall (chr => chr.isLetter)) //> words  : List[String] = List(Aarhus, Aaron, Ababa, aback, abaft, abandon, ab
                                                  //| andoned, abandoning, abandonment, abandons, abase, abased, abasement, abasem
                                                  //| ents, abases, abash, abashed, abashes, abashing, abasing, abate, abated, aba
                                                  //| tement, abatements, abater, abates, abating, Abba, abbe, abbey, abbeys, abbo
                                                  //| t, abbots, Abbott, abbreviate, abbreviated, abbreviates, abbreviating, abbre
                                                  //| viation, abbreviations, Abby, abdomen, abdomens, abdominal, abduct, abducted
                                                  //| , abduction, abductions, abductor, abductors, abducts, Abe, abed, Abel, Abel
                                                  //| ian, Abelson, Aberdeen, Abernathy, aberrant, aberration, aberrations, abet, 
                                                  //| abets, abetted, abetter, abetting, abeyance, abhor, abhorred, abhorrent, abh
                                                  //| orrer, abhorring, abhors, abide, abided, abides, abiding, Abidjan, Abigail, 
                                                  //| Abilene, abilities, ability, abject, abjection, abjections, abjectly, abject
                                                  //| ness, abjure, abjured, abjures, abjuring, ablate, ablated, ablates, ablating
                                                  //| , ablation, ablative, ab
                                                  //| Output exceeds cutoff limit.
	
	val mnem = Map('2'->"ABC",'3'->"DEF",'4'->"GHI",'5'->"JKL",'6'->"MNO",'7'->"PQRS",'8'->"TUV",'9'->"WXYZ")
                                                  //> mnem  : scala.collection.immutable.Map[Char,String] = Map(8 -> TUV, 4 -> GHI
                                                  //| , 9 -> WXYZ, 5 -> JKL, 6 -> MNO, 2 -> ABC, 7 -> PQRS, 3 -> DEF)
	
	//inverted map with chars from A to Z and 2 to  9
	var charCode: Map[Char, Char] =
		for ((digit, str) <- mnem; letter <- str) yield letter -> digit
                                                  //> charCode  : Map[Char,Char] = Map(E -> 3, X -> 9, N -> 6, T -> 8, Y -> 9, J -
                                                  //| > 5, U -> 8, F -> 3, A -> 2, M -> 6, I -> 4, G -> 4, V -> 8, Q -> 7, L -> 5,
                                                  //|  B -> 2, P -> 7, C -> 2, H -> 4, W -> 9, K -> 5, R -> 7, O -> 6, D -> 3, Z -
                                                  //| > 9, S -> 7)
	
	def wordCode(word: String): String =
		word.toUpperCase map charCode     //> wordCode: (word: String)String
		
	wordCode("JULIO")                         //> res0: String = 58546
	
	wordCode("julio")                         //> res1: String = 58546

	val wordsForNum: Map[String, Seq[String]] =
		words groupBy wordCode            //> java.util.NoSuchElementException: key not found: -
                                                  //| 	at scala.collection.MapLike$class.default(MapLike.scala:228)
                                                  //| 	at scala.collection.AbstractMap.default(Map.scala:59)
                                                  //| 	at scala.collection.MapLike$class.apply(MapLike.scala:141)
                                                  //| 	at scala.collection.AbstractMap.apply(Map.scala:59)
                                                  //| 	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike
                                                  //| .scala:234)
                                                  //| 	at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike
                                                  //| .scala:234)
                                                  //| 	at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimize
                                                  //| d.scala:33)
                                                  //| 	at scala.collection.immutable.StringOps.foreach(StringOps.scala:29)
                                                  //| 	at scala.collection.TraversableLike$class.map(TraversableLike.scala:234)
                                                  //| 
                                                  //| 	at scala.collection.immutable.StringOps.map(StringOps.scala:29)
                                                  //| 	at week6.mnemonics$$anonfun$main$1.week6$mnemonics$$anonfun$$wordCode$1(
                                                  //| week6.mnemonics.scala:18)
                                                  //| 	at week6.mnemonics$$anonfun$main$1$$anonfun$3.apply(week6.mnemonics
                                                  //| Output exceeds cutoff limit.
}