package week6

//there can't be two queens int the same row, column or diagonal
object nqueens {
  //produces a set of solutions
  def queensPossiblePositions(numberOfRows: Int): Set[List[Int]] = {
    
    def placeQueens(numberOfQueens: Int): Set[List[Int]] = {
      val empty = Set(List[Int]())
      if (numberOfQueens == 0)
      	empty
      else
        for {
          queens <- placeQueens(numberOfQueens - 1)
          column <- 0 until numberOfRows //tests all columns
          if isSafe(column, queens) //filter
        } yield column :: queens
      
    }
    
    placeQueens(numberOfRows)
  }
  
  def isSafe(column: Int, queens: List[Int]): Boolean = {
  	val row = queens.length
  	val queensWithRows = (row - 1 to 0 by -1) zip queens
  	queensForRow forall {
  	  //val notInDiagonals
  		case (thisRow, thisColumn) => column != thisColumn && math.abs(column - thisColumn) != row - thisRow
  	}
  }

}