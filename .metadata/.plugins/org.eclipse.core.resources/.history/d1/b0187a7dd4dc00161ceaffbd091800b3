package week5

object ListMethods {

  val numbers = List(12, -10, 1, 9, 8, 5, 0, -7, 87, -99)

  numbers filter (n => n > 0)
  numbers filterNot (n => n > 0)
  numbers partition (n => n > 0)
  numbers takeWhile (n => n > 0)
  numbers dropWhile (n => n > 0)
  numbers span (n => n > 0)

  def pack[T](xs: List[T]): List[List[T]] = xs match {
    case Nil => Nil
    case x :: xs1 =>
      val (first, rest) = xs span (y => y == x)
      first :: pack(rest)
  }

  val data = List("a", "a", "a", "b", "c", "c", "a")

  pack(data)

  def encode[T](xs: List[T]): List[(T, Int)] =
    pack(xs) map (ys => (ys.head, ys.length))

  encode(data)

  val names = List("Julio", "Rafael", "Wellington", "Carlos", "Marcelo")
  
  val numbers2 = List(5,10,15,20,25,30,35,40)
  
  numbers2 reduceLeft (_+_)
  numbers2 reduceLeft (_-_)
  
  numbers2 reduceRight (_+_)
  numbers2 reduceRight (_-_)
  
  val fullNumbers = (numbers :: numbers2)

	(numbers2 reverse) reverse

}