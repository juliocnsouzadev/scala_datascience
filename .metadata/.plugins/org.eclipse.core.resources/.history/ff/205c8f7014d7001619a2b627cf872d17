package week5

object Testing {

  def init[T](xs: List[T]): List[T] = xs match {
    case List()  => throw new Error("init of empty list")
    case List(x) => List()
    case y :: ys => y :: init(ys)
  } //> init: [T](xs: List[T])List[T]

  def removeAt[T](n: Int, xs: List[T]) = (xs take n) ::: (xs drop n + 1)
  //> removeAt: [T](n: Int, xs: List[T])List[T]

  removeAt(1, List('a', 'b', 'c', 'd')) //> res0: List[Char] = List(a, c, d)

  def merge[T](xs: List[T], ys: List[T])(lt: (T, T) => Boolean): List[T] =
    (xs, ys) match {
      case (Nil, ys) => ys
      case (xs, Nil) => xs
      case (x :: xs1, y :: ys1) =>
        if (lt(x, y)) x :: merge(xs1, ys)(lt)
        else y :: merge(xs, ys1)(lt)

    } //> merge: [T](xs: List[T], ys: List[T])(lt: (T, T) => Boolean)List[T]

  def msort[T](xs: List[T])(lt: (T, T) => Boolean): List[T] = {
    val n = xs.length / 2
    if (n == 0) xs
    else {
      val (fst, snd) = xs splitAt n
      merge(msort(fst)(lt), msort(snd)(lt))(lt)
    }
  } //> msort: [T](xs: List[T])(lt: (T, T) => Boolean)List[T]

  val numbers = List(0, 10 - 5 - 8, 11, 4, 3, -1, 1, -2)
  //> numbers  : List[Int] = List(0, -3, 11, 4, 3, -1, 1, -2)
  msort(numbers)((x: Int, y: Int) => x < y) //> res1: List[Int] = List(-3, -2, -1, 0, 1, 3, 4, 11)
}